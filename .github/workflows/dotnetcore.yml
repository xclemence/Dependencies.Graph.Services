name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    outputs:
      buildVersion: ${{ env.IMAGE_TAG  }}
      imageName: ${{ env.IMAGE_NAME  }}
      imageArtifact: ${{ env.IMAGE_ARTIFACT  }}
    env:
      IMAGE_NAME: docker-image
      IMAGE_ARTIFACT: depencies-graph-api-image

    steps:
    - uses: actions/checkout@v2
    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201
        source-url: https://nuget.pkg.github.com/xclemence/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.2
      with:
          versionSpec: '5.2.x'
    
    - name: Install dependencies
      run: dotnet restore Dependencies.Graph.Services.sln
      working-directory: src
    
    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.2
    
    - name: Set env
      run: echo ::set-env name=IMAGE_TAG::${{ steps.gitversion.outputs.nuGetVersionV2  }}
    
    - name: Build
      run: dotnet build Dependencies.Graph.Services.sln --configuration Release --no-restore /p:VersionSuffix=${{ steps.gitversion.outputs.preReleaseTag }} /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2  }}
      working-directory: src
    
    - name: Test
      run: dotnet test Dependencies.Graph.Services.sln --configuration Release
      working-directory: src

    - uses: actions/upload-artifact@v2
      with:
        name: dtos
        path: src/Dependencies.Graph.Dtos/bin/Release
    
    - name: Build the Docker image
      run: docker build . --file Dependencies.Graph.Api/Dockerfile --tag dependencies-graph-api:${{ env.IMAGE_TAG  }}
      working-directory: src
    
    - name: save docker-image
      run: docker save -o ./${{ env.IMAGE_NAME  }} dependencies_graph_api:${{ env.IMAGE_TAG  }}
    
    - name: Upload image
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.IMAGE_ARTIFACT }}
        path: ${{ env.IMAGE_NAME  }}
   
  deploy docker:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Download image
      uses: actions/download-artifact@v1
      with:
        name: ${{needs.build.outputs.imageArtifact}}
    - name: test
      run: ls
    - name: load image
      run: docker load -i ./${{needs.build.outputs.imageArtifact}}/${{needs.build.outputs.imageName}}
    - name: Docker login
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
    - name: Docker ls
      run: docker image ls
    - name: Docker push
      run: docker push docker.pkg.github.com/xclemence/dependencies-graph-services/dependencies-graph-api:${{needs.build.outputs.buildVersion}}
        
  deploy-nuget:
    needs: [build]
    runs-on: ubuntu-latest
    #if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201
        source-url: https://nuget.pkg.github.com/xclemence/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Download image
      uses: actions/download-artifact@v1
      with:
        name: dtos
    - name: Publish Nuget package
      run: dotnet nuget push **/*.nupkg --skip-duplicate --no-symbols true:  
      
    #- name: Publish docker image
    #  uses: docker/build-push-action@v1 
    #  #if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    #  with:
    #    username: ${{ github.actor }}
    #    password: ${{ secrets.GITHUB_TOKEN }}
    #    registry: docker.pkg.github.com
    #    repository: ${{ github.repository }}/dependencies-graph-api
    #    tag_with_ref: true
    #    tag: v${{needs.build.buildVersion}}
    #    dockerfile: Dependencies.Graph.Api/Dockerfile
      
      

    
